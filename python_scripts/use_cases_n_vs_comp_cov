#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import csv
import matplotlib.pyplot as plt
import numpy as np
from sympy import *
import math

plot_color=1
font_size = 26
font_weight = 550
legend_font_size = 22
axes_font_size = 16
marker_size = 15

N_set = [float(i) for i in range(5,145,5)]
#N_set = [float(i) for i in range(30,55,5)]

channel_rate = 2
IS = 12
W=channel_rate*1000000
P_s = 1500*8
image_size = IS*8*1000
T = 50
B_clique = np.zeros(len(N_set)) # [0.0 for i in range(len(N_set))]
B_star = np.zeros(len(N_set)) # [0.0 for i in range(len(N_set))]
B_line = np.zeros(len(N_set)) # [0.0 for i in range(len(N_set))]
B_grid = np.zeros(len(N_set)) # [0.0 for i in range(len(N_set))]

for i,N in enumerate(N_set):
    B_clique[i] = (W*T - P_s)/(N-1)
    B_star[i] = (W*T - N*P_s)/((N-1)*(N-2))
    B_line[i] = (W*T - 1.5*P_s*N)/(1.5*N)
    B_grid[i] = (W*T - 2.5*P_s*math.sqrt(N))/(5*math.sqrt(N))
    
ccp_requ = []              
#ss_requ = csvread('SumSimRequirements_PSU_Data_Set.csv')
with open('Cluster_Perc_Sets_Covered.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        print(row)
        ccp_requ.append(float(row[0]))

CPC_clique = np.zeros(len(N_set)) # [0.0 for i in range(len(N_set))]
for i in range(len(N_set)):
    if B_clique[i]/image_size < 8:
        CPC_clique[i] = 0.0
        continue
    found = False
    for j,val in enumerate(ccp_requ):
        if j > B_clique[i]/image_size:
            CPC_clique[i] = val
            found = True
            break
    if found == False:
        CPC_clique[i] = 1.0
CPC_star = np.zeros(len(N_set)) # [0.0 for i in range(len(N_set))]
for i in range(len(N_set)):
    if B_star[i]/image_size < 8:
        CPC_star[i] = 0.0
        continue
    found = False
    for j,val in enumerate(ccp_requ):
        if j > B_star[i]/image_size:
            CPC_star[i] = val
            found = True
            break
    if found == False:
        CPC_star[i] = 1.0
CPC_line = np.zeros(len(N_set)) # [0.0 for i in range(len(N_set))]
for i in range(len(N_set)):
    if B_line[i]/image_size < 8:
        CPC_line[i] = 0.0
        continue
    found = False
    for j,val in enumerate(ccp_requ):
        if j > B_line[i]/image_size:
            CPC_line[i] = val
            found = True
            break
    if found == False:
        CPC_line[i] = 1.0
CPC_grid = np.zeros(len(N_set)) # [0.0 for i in range(len(N_set))]
for i in range(len(N_set)):
    if B_grid[i]/image_size < 8:
        CPC_grid[i] = 0.0
        continue
    found = False
    for j,val in enumerate(ccp_requ):
        if j > B_grid[i]/image_size:
            CPC_grid[i] = val
            found = True
            break
    if found == False:
        CPC_grid[i] = 1.0
#print(CPC_clique)                      
#print(CPC_star)

fig = plt.figure()
ax = fig.add_subplot(111)
plt.plot(N_set, CPC_clique, 'ro-', markerfacecolor='none', markersize=10, label="Clique")
plt.plot(N_set, CPC_star, 'k*-', markerfacecolor='none', markersize=10, label="Star")
plt.plot(N_set, CPC_line, 'b+-', markersize=10, label="Line")
plt.plot(N_set, CPC_grid, 'gx-', markersize=10, label="Grid")
ax.set_xlabel('Number of Nodes', fontsize=axes_font_size, family='Arial', weight=font_weight) #, fontweight='bold'
ax.set_ylabel('Prob. All Sets Covered', fontsize=axes_font_size, family='Arial', weight=font_weight) #, fontweight='bold'
#ax.spines['top'].set_visible(False)
#ax.spines['right'].set_visible(False)
plt.legend(loc='best', fontsize=12)
plt.savefig('./ccp_vs_N.pdf');